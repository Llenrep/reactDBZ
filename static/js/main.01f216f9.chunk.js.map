{"version":3,"sources":["components/images/GokuBG.jpg","components/images/DBSbg.mp4","components/Card/Card.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","console","log","characters","array","i","length","j","Math","floor","random","temp","shuffleArray","map","char","react_default","a","createElement","key","id","clicked","className","onClick","e","handleClick","handleLoss","alt","name","src","image","Wrapper","children","aCStyle","fontSize","fontStyle","margin","bottom","resetStyling","float","border","sectionStyle","width","height","backgroundImage","Background","color","textShadow","ColoredLine","_ref","style","backgroundColor","initialState","amountClicked","resetState","wins","loss","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","reset","setState","handleOnClick","preventDefault","state","alert","handleTheLoss","Fragment","components_Wrapper","App_ColoredLine","components_Card_Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01f216f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GokuBG.42cda88d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/DBSbg.1a1e36e8.mp4\";","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n\r\nfunction shuffleArray(array) {\r\n    let i = array.length - 1;\r\n    for (; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction changeClicked(array) {\r\n    let i = array.length - 1;\r\n    for (; i > 0; i--) {\r\n        console.log(array[i])\r\n    }\r\n}\r\n\r\n//everything is on the screen right?\r\n//you want the object that is clicked to be changed from false to true BEFORE it re renders, and have that state of change remain the same.\r\n\r\n//pass in value before you shuffle, rendering comes last.\r\n\r\nfunction Card(props) { //because this is trying to access the properties of the parent class, it takes the props variable in the function.\r\n    //the name of the onclick function within the child component, (Card) needs to match the name of the function, but like I have it below.\r\n\r\n    console.log(props.characters);\r\n\r\n    var shuffledChars = shuffleArray(props.characters);\r\n\r\n    return (\r\n        shuffledChars.map(char => (\r\n            <button key={char.id} clicked={props.clicked} className=\"button\" onClick={(e) => {\r\n                props.handleClick(e);\r\n                props.handleLoss(e);\r\n            }}>\r\n                <div>\r\n                    <div className=\"card\">\r\n                        <div className=\"img-container\">\r\n                            <img alt={char.name} src={char.image} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </button>\r\n        ))\r\n\r\n    );\r\n}\r\n\r\nexport default Card;\r\n\r\n//Make it so that if the button is clicked again, after its status has been previously changed, add a loss might have to have how many times its clicked.\r\n//\r\n\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Background from './components/images/GokuBG.jpg';\nimport liveBG from './components/images/DBSbg.mp4';\nimport Card from \"./components/Card/Card.js\";\nimport Wrapper from \"./components/Wrapper\";\nimport characters from \"./characters.json\";\n\n\nvar aCStyle = {\n  fontSize: \"12px\",\n  fontStyle: \"italic\",\n  margin: \"10px 10px 10px 10px\",\n  bottom: '4'\n}\n\nvar resetStyling = {\n  fontSize: \"18px\",\n  fontStyle: \"italic\",\n  float: \"right\",\n  margin: \"10px 10px 10px 10px\",\n  border: '2px solid black'\n}\n\nvar sectionStyle = { //regular font for the entirety of the section. more so the introduction though\n  width: \"100%\",\n  height: \"100%\",\n  backgroundImage: \"url(\" + Background + \")\",\n  color: \"white\",\n  textShadow: \"2px 2px #ff0000\"\n};\n\nvar fontStyle = { //font decreasing method\n  fontSize: \"12px\",\n  fontStyle: \"italic\"\n}\n\nconst ColoredLine = ({ color }) => ( //for any time I want to implement HR tags\n  <hr\n    style={{\n      color: color,\n      backgroundColor: color,\n      height: 0.2\n    }}\n  />\n);\n\nconst initialState = {\n  amountClicked: 0,\n  clicked: false,\n};\n\nconst resetState = {\n  wins: 0,\n  loss: 0,\n  amountClicked: 0,\n  clicked: false\n}\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      wins: 0,\n      loss: 0,\n      amountClicked: 0,\n      clicked: false\n    }\n\n  }\n\n  reset = () => {\n    this.setState(resetState);\n  }\n\n  handleOnClick = (e) => { //this matches the name of the function passed below on the card calling\n    e.preventDefault();\n    var { amountClicked } = this.state; //the name of the variable already references the var your looking for. You just need this.state and it will look for that variable itself.\n    var { wins } = this.state;\n    var { clicked } = this.state;\n    this.setState({ amountClicked: amountClicked + 1 });\n\n    if (amountClicked === 15) {\n      alert(\"You won!\");\n      this.setState(initialState);\n      this.setState({ wins: wins + 1 });\n    }\n  }\n\n  handleTheLoss = (e) => {\n    e.preventDefault();\n\n    var { clicked } = this.state;\n    var { loss } = this.state;\n\n    // if (clicked === false) {\n    //   this.setState({ clicked: true });\n    // }\n\n    if (clicked === true) {\n      alert(\"You lose!\");\n      this.setState({ loss: loss + 1 });\n      this.setState(initialState);\n    }\n\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Wrapper>\n          <section style={sectionStyle}>\n            <center><h1>React Click</h1></center>\n            <center><h6 style={fontStyle}>DragonBall Style</h6></center>\n            <div className=\"container\">\n              <ColoredLine color=\"red\" />\n            </div>\n            <center style={fontStyle}><h6>Wins: {this.state.wins}</h6><h6>Loss: {this.state.loss}</h6></center>\n            <div className=\"row\">\n              <div className=\"col-md-3\">\n                <h6 style={aCStyle}>Amount Clicked: {this.state.amountClicked} out of 16!</h6>\n              </div>\n              <div className=\"col-md-3\"></div>\n              <div className=\"col-md-3\"></div>\n              <div className=\"col-md-3\"><button style={resetStyling} onClick={this.reset}>Reset</button></div>\n            </div>\n            <div className=\"container\">\n              <ul>\n                <Card characters={characters} clicked={this.state.clicked} handleClick={this.handleOnClick} handleLoss={this.handleTheLoss} />\n              </ul>\n            </div>\n          </section>\n        </Wrapper>\n      </React.Fragment >\n    );\n  }\n}\n//Right now my issue is defining a loss.\n//First we need to be able to give the button a class of clicked and that needs to be interchangable, but individually\n//After that, it being true or false will be the deciding factor for how the user looses. Literally the last thing we need to do.\n\n//if you can finish this portion, try adding the high score portion of it. Completely forgot about that part.\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}